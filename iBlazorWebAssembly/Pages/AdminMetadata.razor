@page "/admin/metadata"

@inject IMetadataService<BlogPostMetadata> BlogPostService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject AdminAuthService AuthService
@inject IMessageService MessageService
@layout AdminLayout

<PageTitle>元数据管理 - 管理后台</PageTitle>

<FluentCard AreaRestricted="false">
    <div class="metadata-manager">
        <h1>元数据管理</h1>
        
        <div class="toolbar">
            <FluentButton Appearance="Appearance.Accent" OnClick="@(() => OpenEditor(null))">
                <FluentIcon Value="@(new Icons.Regular.Size24.Add())" Slot="start" />
                创建博客文章
            </FluentButton>
        </div>
        
        <div class="filter-section">
            <FluentSearch Placeholder="搜索文章..." @bind-Value="searchTerm" />
            <FluentSelect TOption="string" @bind-Value="categoryFilter" Placeholder="选择分类" Width="200px">
                <FluentOption TOption="string" Value="">全部分类</FluentOption>
                @foreach(var category in categories)
                {
                    <FluentOption TOption="string" Value="@category">@category</FluentOption>
                }
            </FluentSelect>
            <FluentCheckbox @bind-Value="showPublishedOnly" Label="仅显示已发布" />
        </div>
        
        <FluentDataGrid Items="@filteredItems" TGridItem="BlogPostMetadata" ResizableColumns="true">
            <PropertyColumn Title="标题" Property="@(c => c.Title)" Sortable="true" />
            <PropertyColumn Title="分类" Property="@(c => c.Category)" Sortable="true" />
            <PropertyColumn Title="最后更新" Property="@(c => c.UpdatedAt.ToShortDateString())" Sortable="true" />
            <PropertyColumn Title="状态" Property="@(c => c.IsPublished ? "已发布" : "草稿")" Sortable="true" />
            <TemplateColumn Title="操作">
                <ChildContent Context="context">
                    <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8">
                        <FluentButton OnClick="@(() => OpenEditor(context))" Title="编辑">
                            <FluentIcon Value="@(new Icons.Regular.Size20.Edit())" Slot="start" />
                            编辑
                        </FluentButton>
                        <FluentDivider Orientation="Orientation.Vertical" />
                        <FluentButton OnClick="@(() => DeletePost(context.Id))" Title="删除">
                            <FluentIcon Value="@(new Icons.Regular.Size20.Delete())" Slot="start" />
                            删除
                        </FluentButton>
                    </FluentStack>
                </ChildContent>
            </TemplateColumn>
        </FluentDataGrid>
    </div>
</FluentCard>

@if (showEditor)
{
    <FluentDialog Modal="true" Width="800px" Height="auto" @bind-Visible="showEditor">
        <FluentDialogHeader>
            <FluentStack VerticalAlignment="VerticalAlignment.Center">
                @if (editingPost?.Id == null)
                {
                    <FluentIcon Value="@(new Icons.Regular.Size24.Add())" Slot="start" />
                }
                else
                {
                    <FluentIcon Value="@(new Icons.Regular.Size24.Edit())" Slot="start" />
                }
                <FluentLabel Typo="Typography.PaneHeader">
                    @(editingPost?.Id == null ? "创建文章" : "编辑文章")
                </FluentLabel>
            </FluentStack>
        </FluentDialogHeader>
        <FluentDialogBody>
            <FluentStack Orientation="Orientation.Vertical" VerticalGap="10">
                <FluentTextField @bind-Value="editingPost.Title" Placeholder="文章标题" Required="true" />
                <FluentTextArea @bind-Value="editingPost.Summary" Placeholder="文章摘要" Style="min-height: 80px;" />
                <FluentTextArea @bind-Value="editingPost.Content" Placeholder="文章内容" Style="min-height: 200px;" />
                <FluentTextField @bind-Value="editingPost.Author" Placeholder="作者" />
                <FluentTextField @bind-Value="editingPost.Category" Placeholder="分类" />
                <FluentTextField @bind-Value="tagsInput" Placeholder="标签 (用逗号分隔)" />
                <FluentCheckbox @bind-Value="editingPost.IsPublished" Label="发布文章" />
            </FluentStack>
        </FluentDialogBody>
        <FluentDialogFooter>
            <FluentButton Appearance="Appearance.Accent" OnClick="SavePost">
                <FluentIcon Value="@(new Icons.Regular.Size20.Save())" Slot="start" />
                保存
            </FluentButton>
            <FluentButton OnClick="CancelEditing">取消</FluentButton>
        </FluentDialogFooter>
    </FluentDialog>
}

<style>
    .metadata-manager {
        padding: 1rem;
    }
    
    .toolbar {
        margin-bottom: 1rem;
        display: flex;
        justify-content: flex-end;
    }
    
    .filter-section {
        display: flex;
        gap: 1rem;
        margin-bottom: 1rem;
        flex-wrap: wrap;
        align-items: center;
    }
    
    @@media (max-width: 768px) {
        .filter-section {
            flex-direction: column;
            align-items: stretch;
        }
    }
</style>

@code {
    private List<BlogPostMetadata> blogPosts = new List<BlogPostMetadata>();
    private HashSet<string> categories = new HashSet<string>();
    private string searchTerm = "";
    private string categoryFilter = "";
    private bool showPublishedOnly = false;
    private bool showEditor = false;
    private BlogPostMetadata editingPost = new BlogPostMetadata();
    private string tagsInput = "";
    private const string MESSAGES_ADMIN = "MESSAGES_ADMIN";
    
    protected override async Task OnInitializedAsync()
    {
        // 验证登录状态
        var isLoggedIn = await AuthService.IsLoggedInAsync();
        if (!isLoggedIn)
        {
            NavigationManager.NavigateTo("/admin/login");
            return;
        }
        
        await LoadBlogPosts();
    }
    
    private async Task LoadBlogPosts()
    {
        var posts = (await BlogPostService.GetAllAsync()).ToList();
        blogPosts = posts;
        
        // 提取所有分类
        categories = new HashSet<string>(posts.Select(p => p.Category).Where(c => !string.IsNullOrEmpty(c)));
        
        StateHasChanged();
    }
    
    private IQueryable<BlogPostMetadata> filteredItems => blogPosts
        .Where(p => string.IsNullOrEmpty(searchTerm) || p.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) || 
                    p.Content.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    p.Summary.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        .Where(p => string.IsNullOrEmpty(categoryFilter) || p.Category == categoryFilter)
        .Where(p => !showPublishedOnly || p.IsPublished)
        .AsQueryable();
    
    private void OpenEditor(BlogPostMetadata? post)
    {
        if (post == null)
        {
            editingPost = new BlogPostMetadata();
            tagsInput = "";
        }
        else
        {
            editingPost = new BlogPostMetadata
            {
                Id = post.Id,
                Title = post.Title,
                Summary = post.Summary,
                Content = post.Content,
                Author = post.Author,
                Category = post.Category,
                Tags = new List<string>(post.Tags),
                IsPublished = post.IsPublished,
                CreatedAt = post.CreatedAt,
                UpdatedAt = post.UpdatedAt,
                ViewCount = post.ViewCount
            };
            tagsInput = string.Join(", ", post.Tags);
        }
        
        showEditor = true;
    }
    
    private async Task SavePost()
    {
        if (string.IsNullOrEmpty(editingPost.Title))
        {
            await MessageService.ShowMessageBarAsync("文章标题不能为空", MessageIntent.Warning, MESSAGES_ADMIN);
            return;
        }
        
        // 处理标签
        if (!string.IsNullOrEmpty(tagsInput))
        {
            editingPost.Tags = tagsInput.Split(',')
                .Select(t => t.Trim())
                .Where(t => !string.IsNullOrEmpty(t))
                .ToList();
        }
        
        bool isNew = string.IsNullOrEmpty(editingPost.Id);
        bool success;
        
        try
        {
            if (isNew)
            {
                success = await BlogPostService.AddAsync(editingPost);
                if (success)
                {
                    await MessageService.ShowMessageBarAsync("文章已成功创建", MessageIntent.Success, MESSAGES_ADMIN);
                }
            }
            else
            {
                success = await BlogPostService.UpdateAsync(editingPost);
                if (success)
                {
                    await MessageService.ShowMessageBarAsync("文章已成功更新", MessageIntent.Success, MESSAGES_ADMIN);
                }
            }
            
            if (success)
            {
                showEditor = false;
                await LoadBlogPosts();
            }
            else
            {
                await MessageService.ShowMessageBarAsync("操作失败，请稍后重试", MessageIntent.Error, MESSAGES_ADMIN);
            }
        }
        catch (Exception ex)
        {
            await MessageService.ShowMessageBarAsync($"发生错误: {ex.Message}", MessageIntent.Error, MESSAGES_ADMIN);
        }
    }
    
    private void CancelEditing()
    {
        showEditor = false;
    }
    
    private async Task DeletePost(string id)
    {
        try
        {
            bool confirmed = await JS.InvokeAsync<bool>("confirm", "确定要删除这篇文章吗？");
            if (confirmed)
            {
                var success = await BlogPostService.DeleteAsync(id);
                if (success)
                {
                    await MessageService.ShowMessageBarAsync("文章已成功删除", MessageIntent.Success, MESSAGES_ADMIN);
                    await LoadBlogPosts();
                }
                else
                {
                    await MessageService.ShowMessageBarAsync("删除失败，请稍后重试", MessageIntent.Error, MESSAGES_ADMIN);
                }
            }
        }
        catch (Exception ex)
        {
            await MessageService.ShowMessageBarAsync($"删除文章时发生错误: {ex.Message}", MessageIntent.Error, MESSAGES_ADMIN);
        }
    }
}