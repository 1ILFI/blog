@page "/admin/blog-settings"
@page "/BlogSettings"

@inject IMetadataService<BlogSettingsMetadata> SettingsService
@inject NavigationManager NavigationManager
@inject ThemeService ThemeService
@inject IGitHubFileService GitHubService
@inject IDialogService DialogService

<PageTitle>博客设置</PageTitle>

<FluentStack Style="padding: 20px;" VerticalGap="20">
    <FluentLabel Typo="Typography.PageTitle">博客设置</FluentLabel>
    <FluentDivider></FluentDivider>
    
    <FluentTabs>
        <FluentTab Label="主题设置">
            <FluentCard Style="margin: 20px 0;">
                <FluentLabel Typo="Typography.Body">主题设置</FluentLabel>
                <ThemeSettings />
            </FluentCard>
        </FluentTab>
        <FluentTab Label="GitHub 配置">
            <FluentCard Style="margin: 20px 0; padding: 20px;">
                <FluentStack VerticalGap="16">
                    <FluentLabel Typo="Typography.H3">GitHub 访问令牌设置</FluentLabel>
                    <p>文档系统需要 GitHub 访问令牌来上传和管理文件。请提供一个有效的个人访问令牌 (PAT)。</p>
                    
                    <FluentTextField @bind-Value="gitHubToken" 
                                   Placeholder="输入 GitHub 个人访问令牌 (PAT)"
                                   Type="@(showToken ? "text" : "password")"
                                   Style="width: 100%;">
                        @if(showToken)
                        {
                            <FluentIcon Slot="end" Value="@(new Icons.Regular.Size20.Eye())" @onclick="() => showToken = !showToken" />
                        }
                        else
                        {
                            <FluentIcon Slot="end" Value="@(new Icons.Regular.Size20.EyeOff())" @onclick="() => showToken = !showToken" />
                        }
                    </FluentTextField>
                    
                    <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8">
                        <FluentButton Appearance="Appearance.Accent" 
                                    OnClick="SaveGitHubToken"
                                    IconStart="@(new Icons.Regular.Size20.Save())">
                            保存令牌
                        </FluentButton>
                        <FluentButton Appearance="Appearance.Neutral"
                                    OnClick="VerifyGitHubToken"
                                    IconStart="@(new Icons.Regular.Size20.CheckmarkCircle())">
                            验证令牌
                        </FluentButton>
                        <FluentButton Appearance="Appearance.Outline"
                                    OnClick="ClearGitHubToken"
                                    IconStart="@(new Icons.Regular.Size20.Delete())">
                            清除令牌
                        </FluentButton>
                    </FluentStack>
                    
                    <FluentDivider></FluentDivider>
                    
                    <FluentLabel Typo="Typography.H4">如何获取 GitHub 访问令牌</FluentLabel>
                    <ol>
                        <li>登录您的 GitHub 账户 (1ILFI)。</li>
                        <li>点击右上角头像 → Settings → Developer settings → Personal access tokens → Tokens (classic)。</li>
                        <li>点击 "Generate new token" → "Generate new token (classic)"。</li>
                        <li>命名您的令牌，例如 "ibolg-document-access"。</li>
                        <li>设置令牌过期时间（建议选择至少 90 天）。</li>
                        <li>勾选以下权限范围：
                            <ul>
                                <li><code>repo</code> - 完整的仓库访问权限（用于文件上传和下载）</li>
                                <li><code>read:user</code> - 用户信息读取权限（用于验证）</li>
                            </ul>
                        </li>
                        <li>点击 "Generate token" 并复制生成的令牌。</li>
                    </ol>
                </FluentStack>
            </FluentCard>
        </FluentTab>
        <FluentTab Label="其他设置">
            <FluentCard Style="margin: 20px 0; padding: 20px;">
                <FluentLabel Typo="Typography.Body">其他设置</FluentLabel>
                <!-- 此处可添加其他博客设置选项 -->
                <p>这里可以添加更多博客配置选项，如站点信息、SEO 设置等。</p>
            </FluentCard>
        </FluentTab>
    </FluentTabs>
</FluentStack>

@code {
    private string gitHubToken = string.Empty;
    private bool showToken = false;
    private bool tokenVerified = false;
    
    protected override async Task OnInitializedAsync()
    {
        // 检查令牌是否已设置（不显示具体值，只显示是否已设置）
        tokenVerified = await GitHubService.IsTokenSetAsync();
        if (tokenVerified)
        {
            gitHubToken = "••••••••••••••••••"; // 占位符，不显示实际令牌
        }
    }
    
    private async Task SaveGitHubToken()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(gitHubToken))
            {
                await DialogService.ShowErrorAsync("错误", "GitHub 访问令牌不能为空");
                return;
            }
            
            if (gitHubToken == "••••••••••••••••••")
            {
                await DialogService.ShowInfoAsync("提示", "令牌未更改");
                return;
            }
            
            await GitHubService.SaveTokenAsync(gitHubToken);
            await DialogService.ShowInfoAsync("成功", "GitHub 访问令牌已保存");
            
            // 重新验证令牌
            tokenVerified = true;
        }
        catch (Exception ex)
        {
            await DialogService.ShowErrorAsync("错误", $"保存GitHub令牌失败: {ex.Message}");
        }
    }
    
    private async Task VerifyGitHubToken()
    {
        try
        {
            if (gitHubToken == "••••••••••••••••••")
            {
                // 验证已保存的令牌
                var isValid = await GitHubService.IsTokenSetAsync();
                if (isValid)
                {
                    try
                    {
                        // 尝试获取文件列表来验证令牌有效性
                        await GitHubService.GetFileListAsync();
                        await DialogService.ShowInfoAsync("成功", "GitHub 访问令牌有效");
                        tokenVerified = true;
                    }
                    catch
                    {
                        await DialogService.ShowWarningAsync("警告", "GitHub 访问令牌无效或权限不足");
                        tokenVerified = false;
                    }
                }
                else
                {
                    await DialogService.ShowWarningAsync("警告", "GitHub 访问令牌未设置");
                    tokenVerified = false;
                }
            }
            else if (!string.IsNullOrWhiteSpace(gitHubToken))
            {
                // 先保存新令牌再验证
                await GitHubService.SaveTokenAsync(gitHubToken);
                
                try
                {
                    // 尝试获取文件列表来验证令牌有效性
                    await GitHubService.GetFileListAsync();
                    await DialogService.ShowInfoAsync("成功", "GitHub 访问令牌有效并已保存");
                    tokenVerified = true;
                    gitHubToken = "••••••••••••••••••";
                }
                catch (Exception ex)
                {
                    await DialogService.ShowWarningAsync("警告", $"GitHub 访问令牌无效: {ex.Message}");
                    tokenVerified = false;
                }
            }
            else
            {
                await DialogService.ShowErrorAsync("错误", "请输入 GitHub 访问令牌");
            }
        }
        catch (Exception ex)
        {
            await DialogService.ShowErrorAsync("错误", $"验证GitHub令牌失败: {ex.Message}");
        }
    }
    
    private async Task ClearGitHubToken()
    {
        try
        {
            var dialog = await DialogService.ShowConfirmationAsync(
                "确认清除",
                "确定要清除已保存的 GitHub 访问令牌吗？这将导致文档功能无法正常使用。"
            );
            
            var result = await dialog.Result;
            if (!result.Cancelled)
            {
                await GitHubService.SaveTokenAsync("");
                gitHubToken = string.Empty;
                tokenVerified = false;
                await DialogService.ShowInfoAsync("成功", "GitHub 访问令牌已清除");
            }
        }
        catch (Exception ex)
        {
            await DialogService.ShowErrorAsync("错误", $"清除GitHub令牌失败: {ex.Message}");
        }
    }
}