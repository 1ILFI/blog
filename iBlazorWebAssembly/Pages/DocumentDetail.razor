@page "/document/{id}"
@using iBlazorWebAssembly.Models
@using iBlazorWebAssembly.Services
@inject IMetadataService<DocumentMetadata> MetadataService
@inject IDocumentProcessingService DocumentService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService

<PageTitle>@(document?.Title ?? "文档详情")</PageTitle>

<FluentStack Orientation="Orientation.Vertical" VerticalGap="12">
    <!-- 导航返回 -->
    <FluentButton Appearance="Appearance.Stealth" 
                  IconStart="@(new Icons.Regular.Size20.ArrowLeft())" 
                  OnClick="@(() => NavigationManager.NavigateTo("/document"))">
        返回文档列表
    </FluentButton>

    @if (isLoading)
    {
        <div style="display: flex; justify-content: center; align-items: center; height: 300px;">
            <FluentProgressRing />
        </div>
    }
    else if (document == null)
    {
        <FluentCard>
            <div style="text-align: center; padding: 2rem;">
                <FluentIcon Value="@(new Icons.Regular.Size24.DocumentError())" />
                <h3>文档不存在</h3>
                <p>抱歉，未找到指定的文档。可能该文档已被删除或您没有权限访问。</p>
            </div>
        </FluentCard>
    }
    else
    {
        <!-- 文档标题和元信息 -->
        <FluentCard>
            <div class="document-header">
                <div class="title-section">
                    <FluentIcon Value="@GetDocumentIcon()" />
                    <div>
                        <h1>@document.Title</h1>
                        <div class="document-meta">
                            <span class="file-info">@document.FileName (@FormatFileSize(document.FileSize))</span>
                            <span class="separator">•</span>
                            <span class="upload-date">上传于 @document.CreatedAt.ToString("yyyy-MM-dd HH:mm")</span>
                            @if (document.ModifiedDate != document.CreatedAt)
                            {
                                <span class="separator">•</span>
                                <span class="update-date">更新于 @document.ModifiedDate.ToString("yyyy-MM-dd HH:mm")</span>
                            }
                        </div>
                    </div>
                </div>
                
                <!-- 修复按钮 ID 绑定方式 -->
                <div class="actions">
                    <FluentTooltip Anchor="downloadBtn" Position="TooltipPosition.Bottom">
                        下载文档
                    </FluentTooltip>
                    <FluentButton Id="downloadBtn" Appearance="Appearance.Accent" 
                                IconOnly IconStart="@(new Icons.Regular.Size20.ArrowDownload())"
                                OnClick="@(() => DownloadDocument())" />
                                
                    <FluentTooltip Anchor="editBtn" Position="TooltipPosition.Bottom">
                        编辑文档信息
                    </FluentTooltip>
                    <FluentButton Id="editBtn" Appearance="Appearance.Neutral" 
                                IconOnly IconStart="@(new Icons.Regular.Size20.Edit())"
                                OnClick="@(() => EditDocument())" />
                                
                    <FluentTooltip Anchor="deleteBtn" Position="TooltipPosition.Bottom">
                        删除文档
                    </FluentTooltip>
                    <FluentButton Id="deleteBtn" Appearance="Appearance.Stealth" 
                                IconOnly IconStart="@(new Icons.Regular.Size20.Delete())"
                                OnClick="@(() => DeleteDocument())" />
                </div>
            </div>

            <FluentDivider />

            <!-- 标签和分类 -->
            <div class="document-tags-category">
                <div class="category">
                    <FluentLabel>分类:</FluentLabel>
                    <FluentBadge Appearance="Appearance.Accent">@(string.IsNullOrEmpty(document.Category) ? "未分类" : document.Category)</FluentBadge>
                </div>
                
                <div class="tags">
                    <FluentLabel>标签:</FluentLabel>
                    @if (document.Tags.Any())
                    {
                        <div class="tag-list">
                            @foreach (var tag in document.Tags)
                            {
                                <FluentBadge Appearance="Appearance.Neutral">@tag</FluentBadge>
                            }
                        </div>
                    }
                    else
                    {
                        <span class="no-tags">无标签</span>
                    }
                </div>
            </div>

            <!-- 文档描述 -->
            <div class="document-description">
                <FluentLabel>描述:</FluentLabel>
                <p>@(string.IsNullOrEmpty(document.Description) ? "无描述" : document.Description)</p>
            </div>
        </FluentCard>

        <!-- 文档预览 -->
        <FluentCard>
            <FluentTabs TabType="TabType.Pivot">
                <FluentTab Label="预览">
                    @if (isContentLoading)
                    {
                        <div style="display: flex; justify-content: center; padding: 2rem;">
                            <FluentProgressRing />
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(documentContent))
                    {
                        @if (document.FileType.ToLowerInvariant() == ".md")
                        {
                            <div class="markdown-preview">
                                @((MarkupString)documentContent)
                            </div>
                        }
                        else
                        {
                            <div class="document-preview">
                                @((MarkupString)documentContent)
                            </div>
                        }
                    }
                    else
                    {
                        <div class="preview-error">
                            <FluentIcon Value="@(new Icons.Regular.Size24.DocumentError())" />
                            <p>无法预览此文档。请尝试下载后查看。</p>
                        </div>
                    }
                </FluentTab>
                <FluentTab Label="原始链接">
                    <div class="original-url">
                        <FluentLabel>GitHub原始链接:</FluentLabel>
                        <div class="url-container">
                            <FluentTextField Value="@document.GitHubUrl" ReadOnly Id="githubUrlField" Style="flex: 1;" />
                            <FluentButton Appearance="Appearance.Neutral" IconStart="@(new Icons.Regular.Size20.Copy())"
                                        OnClick="@(() => CopyToClipboard("githubUrlField"))">
                                复制
                            </FluentButton>
                            <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size20.Open())"
                                        OnClick="@(() => JSRuntime.InvokeVoidAsync("window.open", document.GitHubUrl, "_blank"))">
                                访问
                            </FluentButton>
                        </div>
                    </div>
                </FluentTab>
            </FluentTabs>
        </FluentCard>
    }
</FluentStack>

<!-- 编辑文档对话框 -->
<FluentDialog @ref="editDialog" Modal="true" Title="编辑文档信息">
    <FluentDialogBody>
        @if (editingDocument != null)
        {
            <FluentStack Orientation="Orientation.Vertical" VerticalGap="12">
                <FluentTextField @bind-Value="editingDocument.Title" Label="文档标题" Required />
                
                <FluentTextArea @bind-Value="editingDocument.Description" Label="文档描述" Style="min-height: 100px;" />
                
                <div class="tag-section">
                    <FluentLabel>标签</FluentLabel>
                    <div class="tag-container">
                        @foreach (var tag in editingDocument.Tags)
                        {
                            <FluentBadge Appearance="Appearance.Accent" 
                                        DismissButtonClick="() => RemoveTag(tag)" 
                                        Dismissable>
                                @tag
                            </FluentBadge>
                        }
                        <FluentTextField @bind-Value="newTag" Placeholder="添加标签..." 
                                        @onkeydown="TagInputKeyDown" />
                    </div>
                </div>
                
                <FluentSelect @bind-Value="editingDocument.Category" Label="分类" TOption="string"
                            Items="@categories" Placeholder="选择分类">
                </FluentSelect>
                
                <FluentCheckbox @bind-Value="editingDocument.IsPublic" Label="公开文档" />
            </FluentStack>
        }
    </FluentDialogBody>
    <FluentDialogFooter>
        <FluentButton Appearance="Appearance.Neutral" OnClick="CancelEdit">取消</FluentButton>
        <FluentButton Appearance="Appearance.Accent" OnClick="SaveEdit" 
                    Disabled="@(editingDocument == null || string.IsNullOrWhiteSpace(editingDocument.Title))">
            保存
        </FluentButton>
    </FluentDialogFooter>
</FluentDialog>

<style>
    .document-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
    }
    
    .title-section {
        display: flex;
        align-items: center;
        gap: 1rem;
    }
    
    .title-section h1 {
        margin: 0;
        font-size: 1.5rem;
    }
    
    .document-meta {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        color: var(--blog-text-secondary);
        font-size: 0.85rem;
        margin-top: 0.25rem;
    }
    
    .separator {
        color: var(--blog-text-tertiary);
    }
    
    .actions {
        display: flex;
        gap: 0.5rem;
    }
    
    .document-tags-category {
        display: flex;
        flex-wrap: wrap;
        gap: 1.5rem;
        margin: 1rem 0;
    }
    
    .category, .tags {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }
    
    .tag-list {
        display: flex;
        flex-wrap: wrap;
        gap: 0.25rem;
    }
    
    .no-tags {
        color: var(--blog-text-secondary);
        font-style: italic;
    }
    
    .document-description {
        margin: 1rem 0;
    }
    
    .document-description p {
        margin-top: 0.5rem;
        color: var(--blog-text-primary);
        line-height: 1.5;
    }
    
    .markdown-preview, .document-preview {
        padding: 1rem;
        max-height: 70vh;
        overflow-y: auto;
    }
    
    .preview-error {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 2rem;
        gap: 1rem;
        color: var(--blog-text-secondary);
    }
    
    .original-url {
        padding: 1rem;
    }
    
    .url-container {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-top: 0.5rem;
    }
    
    .tag-container {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-top: 0.5rem;
    }
    
    @@media (max-width: 768px) {
        .document-header {
            flex-direction: column;
            gap: 1rem;
        }
        
        .actions {
            align-self: flex-end;
        }
    }
</style>

@code {
    [Parameter]
    public string? Id { get; set; }
    
    private DocumentMetadata? document;
    private DocumentMetadata? editingDocument;
    private string? documentContent;
    private bool isLoading = true;
    private bool isContentLoading = false;
    private string newTag = string.Empty;
    
    // 编辑对话框
    private FluentDialog? editDialog;
    
    // 分类列表
    private List<string> categories = new List<string>
    {
        "技术文档",
        "学习资源",
        "项目文档",
        "教程",
        "参考手册",
        "其他"
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadDocument();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (document == null || document.Id != Id)
        {
            await LoadDocument();
        }
    }

    private async Task LoadDocument()
    {
        isLoading = true;
        
        try
        {
            if (!string.IsNullOrEmpty(Id))
            {
                document = await MetadataService.GetByIdAsync(Id);
                
                if (document != null)
                {
                    await LoadDocumentContent();
                }
            }
        }
        catch (Exception ex)
        {
            await DialogService.ShowErrorAsync("加载文档失败", ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadDocumentContent()
    {
        if (document == null || string.IsNullOrEmpty(document.GitHubUrl))
            return;
            
        isContentLoading = true;
        
        try
        {
            // 获取文件内容并进行处理
            var httpClient = new HttpClient();
            var content = await httpClient.GetByteArrayAsync(document.GitHubUrl);
            
            // 根据文件类型进行不同处理
            documentContent = await DocumentService.ConvertDocumentToHtmlAsync(content, document.FileType);
        }
        catch (Exception ex)
        {
            documentContent = $"<p>预览失败: {ex.Message}</p>";
        }
        finally
        {
            isContentLoading = false;
        }
    }

    private Microsoft.FluentUI.AspNetCore.Components.Icon GetDocumentIcon()
    {
        if (document == null) return new Icons.Regular.Size24.Document();
        
        var extension = document.FileType.ToLowerInvariant();
        return extension switch
        {
            ".docx" or ".doc" => new Icons.Regular.Size24.Document(),
            ".xlsx" or ".xls" => new Icons.Regular.Size24.Table(),
            ".pptx" or ".ppt" => new Icons.Regular.Size24.SlideText(),
            ".pdf" => new Icons.Regular.Size24.DocumentPdf(),
            ".md" => new Icons.Regular.Size24.DocumentText(),
            ".txt" => new Icons.Regular.Size24.TextAlignLeft(),
            _ => new Icons.Regular.Size24.Document()
        };
    }

    private string FormatFileSize(long bytes)
    {
        string[] suffixes = { "B", "KB", "MB", "GB" };
        int counter = 0;
        decimal number = bytes;
        
        while (Math.Round(number / 1024) >= 1)
        {
            number /= 1024;
            counter++;
        }
        
        return $"{number:n1} {suffixes[counter]}";
    }

    private async Task DownloadDocument()
    {
        if (document == null || string.IsNullOrEmpty(document.GitHubUrl))
        {
            await DialogService.ShowErrorAsync("下载失败", "文档URL不可用");
            return;
        }

        // 使用JS下载文件
        try
        {
            await JSRuntime.InvokeVoidAsync("fileOperations.openInNewTab", document.GitHubUrl);
        }
        catch
        {
            // 如果JS互操作失败，使用默认方法
            await JSRuntime.InvokeVoidAsync("window.open", document.GitHubUrl, "_blank");
        }
    }

    private async Task EditDocument()
    {
        if (document == null) return;
        
        // 创建副本进行编辑
        editingDocument = new DocumentMetadata
        {
            Id = document.Id,
            Title = document.Title,
            FileName = document.FileName,
            FileType = document.FileType,
            FileSize = document.FileSize,
            Description = document.Description,
            Tags = new List<string>(document.Tags),
            CreatedAt = document.CreatedAt,
            ModifiedDate = DateTime.Now,
            GitHubUrl = document.GitHubUrl,
            IsPublic = document.IsPublic,
            Category = document.Category,
            Author = document.Author
        };
        
        if (editDialog != null)
        {
            editDialog.Show();
        }
    }

    private async Task DeleteDocument()
    {
        if (document == null) return;
        
        var dialogReference = await DialogService.ShowConfirmationAsync(
            "确认删除",
            $"确定要删除文档 \"{document.Title}\" 吗？此操作无法恢复。"
        );
        
        var result = await dialogReference.Result;
        if (!result.Cancelled)
        {
            try
            {
                // 从元数据中删除
                await MetadataService.DeleteAsync(document.Id);
                
                // 返回文档列表页
                NavigationManager.NavigateTo("/document");
            }
            catch (Exception ex)
            {
                await DialogService.ShowErrorAsync("删除失败", ex.Message);
            }
        }
    }

    private void RemoveTag(string tag)
    {
        if (editingDocument != null)
        {
            editingDocument.Tags.Remove(tag);
        }
    }

    private void TagInputKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(newTag))
        {
            if (editingDocument != null && !editingDocument.Tags.Contains(newTag))
            {
                editingDocument.Tags.Add(newTag);
            }
            newTag = string.Empty;
        }
    }

    // 修复异步方法，确保有await操作
    private async Task CopyToClipboard(string elementId)
    {
        if (document == null) 
        {
            await Task.CompletedTask; // 确保即使提前返回也有await操作
            return;
        }
        
        try
        {
            // 确保使用await
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", document.GitHubUrl);
            // 显示复制成功消息并await对话框结果
            await DialogService.ShowInfoAsync("复制成功", "链接已复制到剪贴板");
        }
        catch
        {
            // 如果浏览器不支持剪贴板API，提示用户手动复制
            await DialogService.ShowErrorAsync("复制失败", "请手动选择链接并复制");
        }
    }

    private async Task SaveEdit()
    {
        if (editingDocument == null || document == null) return;
        
        try
        {
            editingDocument.ModifiedDate = DateTime.Now;
            
            // 使用 UpdateAsync 替代 SaveAsync
            await MetadataService.UpdateAsync(editingDocument);
            
            // 更新本地文档对象
            document = editingDocument;
            editingDocument = null;
            
            // 使用 Hide() 关闭对话框
            if (editDialog != null)
            {
                editDialog.Hide();
            }
            
            // 显示成功消息
            await DialogService.ShowInfoAsync(
                "更新成功",
                "文档信息已成功更新。"
            );
        }
        catch (Exception ex)
        {
            await DialogService.ShowErrorAsync("保存失败", ex.Message);
        }
    }

    private void CancelEdit()
    {
        editingDocument = null;
        if (editDialog != null)
        {
            editDialog.Hide();
        }
    }
}