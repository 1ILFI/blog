@page "/admin"

@inject AdminAuthService AuthService
@inject NavigationManager NavigationManager
@inject IMessageService MessageService
@inject IDialogService DialogService
@inject IMetadataService<BlogPostMetadata> BlogPostService
@layout AdminLayout

<PageTitle>博客管理后台</PageTitle>

<FluentCard AreaRestricted="false" Style="margin-bottom: 16px">
    <div class="admin-welcome">
        <h1>欢迎使用博客管理后台</h1>
        <p>这里是您的个人博客管理中心。您可以管理博客文章元数据、调整博客设置等。</p>
    </div>
</FluentCard>

<div class="admin-dashboard">
    <FluentGrid>
        <FluentGridItem xs="12" sm="6" lg="4">
            <FluentCard class="dashboard-card" @onclick="@(() => NavigationManager.NavigateTo("/admin/metadata"))">
                <div class="dashboard-card-content">
                    <FluentIcon Value="@(new Icons.Regular.Size48.Database())" Slot="start" />
                    <h2>元数据管理</h2>
                    <p>管理博客文章的元数据，包括标题、摘要、标签等</p>
                    <div class="card-stats">
                        <span>已有文章: @postCount</span>
                    </div>
                </div>
            </FluentCard>
        </FluentGridItem>
        
        <FluentGridItem xs="12" sm="6" lg="4">
            <FluentCard class="dashboard-card" @onclick="@(() => NavigationManager.NavigateTo("/admin/settings"))">
                <div class="dashboard-card-content">
                    <FluentIcon Value="@(new Icons.Regular.Size48.Settings())" Slot="start" />
                    <h2>博客设置</h2>
                    <p>调整博客的全局设置，包括名称、描述、主题等</p>
                </div>
            </FluentCard>
        </FluentGridItem>
        
        <FluentGridItem xs="12" sm="6" lg="4">
            <FluentCard class="dashboard-card">
                <div class="dashboard-card-content">
                    <FluentIcon Value="@(new Icons.Regular.Size48.Password())" Slot="start" />
                    <h2>修改密码</h2>
                    <p>更改管理后台的访问密码</p>
                    <div class="password-form">
                        <FluentTextField @bind-Value="oldPassword" Type="password" Placeholder="旧密码" />
                        <FluentTextField @bind-Value="newPassword" Type="password" Placeholder="新密码" />
                        <FluentButton Appearance="Appearance.Accent" OnClick="ChangePassword">
                            <FluentIcon Value="@(new Icons.Regular.Size20.Save())" Slot="start" />
                            保存
                        </FluentButton>
                    </div>
                </div>
            </FluentCard>
        </FluentGridItem>
    </FluentGrid>
</div>

<FluentStack Orientation="Orientation.Horizontal" HorizontalAlign="HorizontalAlign.End" Margin="Margin.Large">
    <FluentButton Appearance="Appearance.Outline" OnClick="Logout">
        <FluentIcon Value="@(new Icons.Regular.Size20.SignOut())" Slot="start" />
        退出登录
    </FluentButton>
</FluentStack>

<style>
    .admin-welcome {
        padding: 1rem;
    }
    
    .admin-dashboard {
        margin-bottom: 2rem;
    }
    
    .dashboard-card {
        height: 100%;
        cursor: pointer;
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }
    
    .dashboard-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
    }
    
    .dashboard-card-content {
        padding: 1.5rem;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }
    
    .card-stats {
        margin-top: 0.5rem;
        font-size: 0.9rem;
        color: #666;
    }
    
    .password-form {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        margin: 1rem 0;
    }
    
    @@media (max-width: 768px) {
        .password-form {
            width: 100%;
        }
    }
</style>

@code {
    private int postCount = 0;
    private string oldPassword = "";
    private string newPassword = "";
    private const string MESSAGES_ADMIN = "MESSAGES_ADMIN";
    
    protected override async Task OnInitializedAsync()
    {
        var isLoggedIn = await AuthService.IsLoggedInAsync();
        
        if (!isLoggedIn)
        {
            NavigationManager.NavigateTo("/admin/login");
            return;
        }
        
        var posts = await BlogPostService.GetAllAsync();
        postCount = posts.Count();
    }
    
    private async Task ChangePassword()
    {
        if (string.IsNullOrEmpty(oldPassword) || string.IsNullOrEmpty(newPassword))
        {
            await MessageService.ShowMessageBarAsync("请填写新旧密码", MessageIntent.Warning, MESSAGES_ADMIN);
            return;
        }
        
        try
        {
            await AuthService.ChangePasswordAsync(oldPassword, newPassword);
            await MessageService.ShowMessageBarAsync("密码已更新成功", MessageIntent.Success, MESSAGES_ADMIN);
            oldPassword = "";
            newPassword = "";
        }
        catch (Exception ex)
        {
            await MessageService.ShowMessageBarAsync(ex.Message, MessageIntent.Error, MESSAGES_ADMIN);
        }
    }
    
    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        NavigationManager.NavigateTo("/");
    }
}